import { describe, expect, test, it } from "vitest";
import { formatSize, SizeFormat } from "../format.mjs";

describe("format tests", () => {
  // Should format a size in IEC format correctly
  // Generated by CodiumAI

  describe("formatSize", () => {
    // Should format a size of 0 correctly
    it("should format a size of 0 correctly", () => {
      expect(formatSize(0)).toBe("0 Bytes");
    });

    // Should format a size in IEC format correctly
    it("should format a size in IEC format correctly when the size is greater than or equal to 1 KB/1 KiB", () => {
      expect(formatSize(1500, SizeFormat.IEC)).toBe("1.46 KiB");
      expect(formatSize(1024, SizeFormat.IEC)).toBe("1.00 KiB");
    });

    // Should format a size in SI format correctly
    it("should format a size in SI format correctly when the size is greater than or equal to 1 KB/1 KiB", () => {
      expect(formatSize(1500, SizeFormat.SI)).toBe("1.50 KB");
      expect(formatSize(1024, SizeFormat.SI)).toBe("1.02 KB");
    });

    // Should format a size in IEC format with decimal places correctly
    it("should format a size in IEC format with decimal places correctly when the size is greater than or equal to 1 KB/1 KiB", () => {
      expect(formatSize(1500, SizeFormat.IEC)).toBe("1.46 KiB");
      expect(formatSize(1024, SizeFormat.IEC)).toBe("1.00 KiB");
    });

    // Should format a size of 0 correctly
    it("should format a size of 0 correctly", () => {
      expect(formatSize(0)).toBe("0 Bytes");
    });

    // Should format a size less than 1 KB/1 KiB correctly
    it("should format a size less than 1 KB/1 KiB correctly", () => {
      expect(formatSize(500)).toBe("500 Bytes");
      expect(formatSize(100)).toBe("100 Bytes");
    });

    // Should format a size equal to 1 KB/1 KiB correctly
    it("should format a size equal to 1 KB/1 KiB correctly", () => {
      expect(formatSize(1024)).toBe("1.00 KiB");
      expect(formatSize(1000, SizeFormat.SI)).toBe("1.00 KB");
    });

    // Should format a size in SI format with decimal places correctly
    it("should format a size in SI format with decimal places correctly when the size is greater than or equal to 1 KB/1 KiB", () => {
      expect(formatSize(1500, SizeFormat.SI)).toBe("1.50 KB");
      expect(formatSize(1024, SizeFormat.SI)).toBe("1.02 KB");
    });

    // Should format a size in IEC format with largest unit correctly
    it("should format a size in IEC format with largest unit correctly when the size is greater than or equal to 1 KB/1 KiB", () => {
      expect(formatSize(1500, SizeFormat.IEC)).toBe("1.46 KiB");
      expect(formatSize(1024, SizeFormat.IEC)).toBe("1.00 KiB");
    });

    // Should format a size in SI format with largest unit correctly
    it("should format a size in SI format with largest unit correctly when the size is greater than or equal to 1 KB/1 KiB", () => {
      expect(formatSize(1500, SizeFormat.SI)).toBe("1.50 KB");
      expect(formatSize(1024, SizeFormat.SI)).toBe("1.02 KB");
    });

    // Should format a size equal to 1 MB/1 MiB correctly
    it("should format a size equal to 1 MB/1 MiB correctly", () => {
      expect(formatSize(1048576, SizeFormat.IEC)).toBe("1.00 MiB");
      expect(formatSize(1000000, SizeFormat.SI)).toBe("1.00 MB");
    });

    // Should format a size equal to 1 GB/1 GiB correctly
    it("should format a size equal to 1 GB/1 GiB correctly", () => {
      expect(formatSize(1024 * 1024 * 1024, SizeFormat.IEC)).toBe("1.00 GiB");
      expect(formatSize(1000 * 1000 * 1000, SizeFormat.SI)).toBe("1.00 GB");
    });

    // Should format a size equal to 1 TB/1 TiB correctly
    it("should format a size equal to 1 TB/1 TiB correctly", () => {
      expect(formatSize(1099511627776, SizeFormat.IEC)).toBe("1.00 TiB");
      expect(formatSize(1000000000000, SizeFormat.SI)).toBe("1.00 TB");
    });

    // Should format a size equal to 1 PB/1 PiB correctly
    it("should format a size equal to 1 PB/1 PiB correctly", () => {
      expect(
        formatSize(1024 * 1024 * 1024 * 1024 * 1024 * 1024, SizeFormat.IEC)
      ).toBe("1024.00 PiB");
      expect(
        formatSize(1000 * 1000 * 1000 * 1000 * 1000 * 1000, SizeFormat.SI)
      ).toBe("1000.00 PB");
    });

    // Should format a size in IEC format with negative value correctly
    it("should format a size in IEC format with negative value correctly", () => {
      expect(formatSize(-1500, SizeFormat.IEC)).toBe("-1.46 KiB");
      expect(formatSize(-1024, SizeFormat.IEC)).toBe("-1.00 KiB");
    });

    // Should format a size in SI format with negative value correctly
    it("should format a size in SI format with negative value correctly", () => {
      expect(formatSize(-1500, SizeFormat.SI)).toBe("-1.50 KB");
      expect(formatSize(-1024, SizeFormat.SI)).toBe("-1.02 KB");
    });

    // Should format a size in IEC format with very large value correctly
    it("should format a size in IEC format correctly when the size is very large", () => {
      expect(formatSize(1000000000000, SizeFormat.IEC)).toBe("931.32 GiB");
      expect(formatSize(1000000000000000, SizeFormat.IEC)).toBe("909.49 TiB");
      expect(formatSize(1000000000000000000, SizeFormat.IEC)).toBe(
        "888.18 PiB"
      );
    });

    // Should format a size in SI format with very large value correctly
    it("should format a size in SI format correctly when the size is very large", () => {
      expect(formatSize(1000000000, SizeFormat.SI)).toBe("1.00 GB");
      expect(formatSize(1000000000000, SizeFormat.SI)).toBe("1.00 TB");
      expect(formatSize(1000000000000000, SizeFormat.SI)).toBe("1.00 PB");
    });
  });
});
